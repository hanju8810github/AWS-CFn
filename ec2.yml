---
AWSTemplateFormatVersion: '2010-09-09'
Description: Made in AWS'
Parameters:
  SystemName:
    Type: String
    Default: hanju-dev
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: hanju8810_key
  AmiId:
    Description: Input an ami-id. Default is the latest AmazonLinux2 AMI.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Description: Input an Instance type.
    Type: String
    Default: t3.micro
  InstanceName:
    Description: Input a instance name.
    Type: String
    Default: hanju8810-dev
  AttachPublicIpAddress:
    Description: Set to true if you want to assign a public IP address, set to false if you don't.
    Type: String
    Default: true
    AllowedValues:
      - "true"
      - "false"
  AllInboundIp:
    Description: Input an IP address you want to access with all.
    Type: String
    Default: "126.76.16.238/32"

Mappings:
  RegionMap:
    'ap-northeast-1':
      AMI: 'ami-0b276ad63ba2d6009'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsHostnames: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '172.31.38.0/24'
      VpcId: !Ref VPC
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '172.31.37.0/24'
      VpcId: !Ref VPC
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

# EC2
  MyInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple web app
      AWS::CloudFormation::Init:
        config:
          packages:
            rpm: {
              "epel": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm",
              "epel2": "https://rpms.remirepo.net/enterprise/remi-release-7.rpm"
            }
            yum:
              httpd: []
              php74: [ ]
          files:
            /var/www/html/index.html:
              content: !Sub |
                <p>Hello!</p>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      EbsOptimized: true
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: !Ref InstanceProfile1
      Monitoring: false
      Tenancy: default
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 15
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: !Ref AttachPublicIpAddress
          DeleteOnTermination: true
          GroupSet:
            - !Ref MySG
          DeviceIndex: 0
          SubnetId: !Ref SubnetA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v \
          --stack ${AWS::StackName} \
          --resource MyInstance \
          --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref SystemName
        - Key: ssm
          Value: true


# SecurityGroup
  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub Security Group attached to ${InstanceName}
      GroupName: !Sub "Sg_${SystemName}"
      SecurityGroupIngress:
        - CidrIp: !Ref AllInboundIp
          Description: all port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1

# Create IAM Role
  IamRole1:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      RoleName: !Sub iamrole_${SystemName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

 # Create Instance Profile
  InstanceProfile1:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub iamrole_${SystemName}
      Path: /
      Roles:
        - !Ref IamRole1
